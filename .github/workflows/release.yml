name: Build and Publish Release

on:
  push:
    branches:
      - master  # Trigger on pushes to master branch

env:
  SOLUTION_FILE: VideoBatch.sln
  PROJECT_PATH: VideoBatchStarter/VideoBatch.csproj
  RELEASE_NAME: VideoBatch

jobs:
  build-and-publish:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'
    
    - name: Get Version
      id: get_version
      shell: pwsh
      run: |
        $xml = [Xml] (Get-Content ${{ env.PROJECT_PATH }})
        $version = $xml.Project.PropertyGroup.Version
        echo "VERSION=$version" >> $env_GITHUB_OUTPUT
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build
      run: dotnet build ${{ env.SOLUTION_FILE }} -c Release --no-restore
      
    - name: Publish
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o publish
        Copy-Item "VideoBatchStarter/README.md" -Destination "publish/README.md"
      shell: pwsh
      
    - name: Create ZIP archive
      run: Compress-Archive -Path publish/* -DestinationPath "${{ env.RELEASE_NAME }}-${{ steps.get_version.outputs.VERSION }}.zip"
      shell: pwsh
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.RELEASE_NAME }}-${{ steps.get_version.outputs.VERSION }}.zip
        name: Release ${{ steps.get_version.outputs.VERSION }}
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 